AWSTemplateFormatVersion: 2010-09-09
Description: Example CFN Template which creates and ECR Reporsitory and Uses CodeBuild to Create containers and commit them to ECR
Parameters:
  S3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: S3 bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: garganatest
    Description: S3 bucket name for the Lambda and CodeBuild assets
    Type: String
  LambdaCodePath:
    Default: "awx/scripts/lambda_codebuild.zip"
    Type: String
  CodeBuildBundle:
    Default: "awx/scripts/codebuild.zip"
    Type: String
Resources:
  ECRRepository:
    Type: AWS::ECR::Repository
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*:*'
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${S3BucketName}/${CodeBuildBundle}'
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
              - Effect: Allow
                Resource:
                  Fn::Join:
                    - ''
                    - - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/'
                      - !Ref ECRRepository
                Action:
                  - ecr:DescribeImages
                  - ecr:ListImages
                  - ecr:PutImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:CompleteLayerUpload
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
              - Effect: Allow
                Resource: "*"
                Action:
                  - ecr:GetAuthorizationToken
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: Builds a docker container and pushes container images to ECR
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/docker:17.09.0"
        PrivilegedMode: True
        EnvironmentVariables:
          # FIXME: want to determine AWS ACCOUNT automagically from inside the build
          - Name: AWS_ACCOUNT_ID
            Value: !Sub '${AWS::AccountId}'
          - Name: IMAGE_REPO_NAME
            Value: !Ref ECRRepository
          - Name: IMAGE_TAG
            Value: 'latest'  
          - Name: url_path
            Value: 'placeholder'
          - Name: url_query
            Value: 'placeholder'
          - Name: cfn_signal_url
            Value: 'placeholder'
          - Name: cfn_stack_id
            Value: 'placeholder'
          - Name: cfn_logical_resource_id
            Value: 'placeholder'
          - Name: cfn_request_id
            Value: 'placeholder'
      Source:
        Location: !Sub '${S3BucketName}/${CodeBuildBundle}'
        Type: S3
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
            #    - ps -ef
            #    - echo $PATH
            #    - yum install -y git gcc docker python27-pip python27-devel libffi-devel openssl-devel git
            #    - /usr/bin/pip install -U docker-py ansible awscli
            #    - service docker start
                 - curl -o aws-cfn-bootstrap-latest.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
                 - mkdir -p /opt/aws/
                 - tar -xzvf aws-cfn-bootstrap-latest.tar.gz --strip-components=1 -C /opt/aws/
                 - export PATH=/opt/aws/bin/:$PATH
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                # FIXME: This is not working the value is an empty string (don't want the extra param)
                - export ACCOUNT_ID=$(echo ${CODEBUILD_BUILD_ARN} | awk -F':' '{print $4}')
                - echo $ACCOUNT_ID
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
                - echo Signal back if we have gotten this far
                - echo url_path - $url_path
                - echo url_query - $url_query
                - export UUID=1233244324
                # FIXME: Wanting to use cfn-signal
                #- export STACK_NAME=`echo $cfn_stack_id | cut -d / -f 2`
                #- |
                #  /opt/aws/bin/cfn-signal -s --region $AWS_DEFAULT_REGION --stack $STACK_NAME --resource $logical_resource_id -d "{\"StackId\":\"$cfn_stack_id\", \"RequestId\":\"$cfn_request_id\", \"LogicalResourceId\":\"$cfn_logical_resource_id\", \"Status\":\"SUCCESS\"}" $cfn_signal_url
                #- "curl -H \"Content-Type: application/json\" -X PUT -d '{\"StackId\": '$cfn_stack_id', \"RequestId\": '$cfn_request_id',\"LogicalResourceId\": '$cfn_logical_resource_id', \"Status\": \"SUCCESS\"}' $cfn_signal_url"
                - |
                  echo curl -X PUT -d "{\"StackId\":\"$cfn_stack_id\", \"RequestId\":\"$cfn_request_id\", \"LogicalResourceId\":\"$cfn_logical_resource_id\", \"PhysicalResourceId\":\"$UUID\", \"Status\":\"SUCCESS\"}" "$cfn_signal_url"
                - |
                  if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]
                  then
                    curl -X PUT -H 'Content-Type:' -d "{\"StackId\":\"$cfn_stack_id\", \"RequestId\":\"$cfn_request_id\", \"LogicalResourceId\":\"$cfn_logical_resource_id\", \"PhysicalResourceId\":\"$UUID\", \"Status\":\"SUCCESS\"}" "$cfn_signal_url"
                  else
                    curl -X PUT -H 'Content-Type:' -d "{\"StackId\":\"$cfn_stack_id\", \"RequestId\":\"$cfn_request_id\", \"LogicalResourceId\":\"$cfn_logical_resource_id\", \"PhysicalResourceId\":\"$UUID\", \"Status\":\"FAILED\"}" "$cfn_signal_url"
                  fi
      TimeoutInMinutes: 60
  CodeBuildRun:
    Type: Custom::CodeBuildRun
    Properties:
      ServiceToken: !GetAtt CodeBuildLambda.Arn
      BuildProjectName: !Ref CodeBuildProject
      # cfn_signal_url: is part of the event by default hence missing here 
      # cfn_stack_id: is part of the event by default 
      # cfn_request_id: also part of the event
      # cfn_logical_resource_id: also part of the event
      # Lambda function passes the above into the build project when invoking StartBuild
  CodeBuildLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref LambdaCodePath
      Handler: "lambda_codebuild.lambda_handler"
      Runtime: python2.7
      Timeout: 300
      Role: !GetAtt CodeBuildLambdaExecutionRole.Arn
  CodeBuildLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - codebuild:StartBuild
            Resource: !GetAtt CodeBuildProject.Arn
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource: arn:aws:s3:::*  
